#!/usr/bin/env python3
"""Import/Export data from Signal's database and run analytics."""

import logging
import os
import pickle

import click
import coloredlogs

import export
import list_conversations
import settings

LOGGER = logging.getLogger(__name__)


def setup_logger(verbose: int):
    """Configure the logger with the specified verbosity."""

    # Adjust slightly the coloredlogs default.
    if verbose >= 3:
        log_fmt = "%(asctime)s %(name)s[%(lineno)d] %(levelname)s %(message)s"
    else:
        log_fmt = "%(asctime)s %(name)s %(levelname)s %(message)s"
    field_styles = coloredlogs.DEFAULT_FIELD_STYLES
    field_styles["levelname"] = {"bold": True}

    coloredlogs.install(
        level=max(10, 30 - verbose * 10), fmt=log_fmt, field_styles=field_styles
    )

    LOGGER.info(
        f"Logger verbosity set to: {logging.getLevelName(LOGGER.getEffectiveLevel())}"
    )

    if verbose >= 3:
        LOGGER.warning("Internal debug options will be used.")


def sanitize_config(config: dict):
    """Sanitize the global configuration."""
    LOGGER.debug(f"Sanitizing global configuration.")
    for k, f in settings.CONFIG_SANITIZER.items():
        config[k] = f(config[k])


@click.group()
@click.option(
    "-v",
    "--verbose",
    count=True,
    help="Increase the verbosity of the logs.  Can be specified multiple times.",
)
@click.option(
    "-d",
    "--signal-dir",
    default=settings.CONFIG["signal_dir"],
    type=click.Path(file_okay=False),
    help="Signal configuration directory.",
)
@click.pass_context
def main(ctx, verbose, signal_dir):
    """Export and analyse chats from Signal Desktop."""
    setup_logger(verbose)

    config = settings.CONFIG

    if signal_dir:
        LOGGER.debug(f"Overwriting signal_dir with command line argument: {signal_dir}")
        config["signal_dir"] = signal_dir

    sanitize_config(config)

    ctx.ensure_object(dict)
    ctx.obj["debug"] = verbose >= 3
    ctx.obj["config"] = config


main.add_command(list_conversations.main)
main.add_command(export.main)

# We have to handle the stats command a little differently to the above as the
# layout needs to be initialized when the module is loaded.
@main.command()
@click.pass_context
def stats(ctx):
    """Analyse statistics from the conversations"""
    try:
        LOGGER.debug("Pickling configuration")
        with open(".config.pkl", "wb") as f:
            pickle.dump(ctx.obj["config"], f)

        import stats as _stats

        _stats.main(ctx.obj["debug"])
    finally:
        try:
            os.remove(".config.pkl")
        except FileNotFoundError:
            pass


if __name__ == "__main__":
    main()  # pylint: disable=no-value-for-parameter
